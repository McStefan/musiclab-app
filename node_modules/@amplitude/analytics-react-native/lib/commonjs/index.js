"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Identify", {
  enumerable: true,
  get: function () {
    return _analyticsCore.Identify;
  }
});
Object.defineProperty(exports, "Revenue", {
  enumerable: true,
  get: function () {
    return _analyticsCore.Revenue;
  }
});
exports.add = exports.Types = void 0;
Object.defineProperty(exports, "createInstance", {
  enumerable: true,
  get: function () {
    return _reactNativeClient.createInstance;
  }
});
exports.track = exports.setUserId = exports.setSessionId = exports.setOptOut = exports.setGroup = exports.setDeviceId = exports.revenue = exports.reset = exports.remove = exports.logEvent = exports.init = exports.identify = exports.groupIdentify = exports.getUserId = exports.getSessionId = exports.getDeviceId = exports.flush = exports.extendSession = void 0;
var _reactNativeClient = _interopRequireWildcard(require("./react-native-client"));
var _analyticsCore = require("@amplitude/analytics-core");
var Types = _interopRequireWildcard(require("./types"));
exports.Types = Types;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/* eslint-disable @typescript-eslint/unbound-method */

const {
  add,
  flush,
  getDeviceId,
  getSessionId,
  getUserId,
  groupIdentify,
  identify,
  init,
  logEvent,
  remove,
  reset,
  revenue,
  setDeviceId,
  setGroup,
  setOptOut,
  setSessionId,
  setUserId,
  track,
  extendSession
} = _reactNativeClient.default;

// Export types to maintain backward compatibility with `analytics-types`.
// In the next major version, only export customer-facing types to reduce the public API surface.
exports.extendSession = extendSession;
exports.track = track;
exports.setUserId = setUserId;
exports.setSessionId = setSessionId;
exports.setOptOut = setOptOut;
exports.setGroup = setGroup;
exports.setDeviceId = setDeviceId;
exports.revenue = revenue;
exports.reset = reset;
exports.remove = remove;
exports.logEvent = logEvent;
exports.init = init;
exports.identify = identify;
exports.groupIdentify = groupIdentify;
exports.getUserId = getUserId;
exports.getSessionId = getSessionId;
exports.getDeviceId = getDeviceId;
exports.flush = flush;
exports.add = add;
//# sourceMappingURL=index.js.map